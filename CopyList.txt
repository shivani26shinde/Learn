/*
// Definition for a Node.
class Node {
    public int val;
    public Node next;
    public Node random;

    public Node() {}

    public Node(int _val,Node _next,Node _random) {
        val = _val;
        next = _next;
        random = _random;
    }
};
*/
class Solution {
    public Node copyRandomList(Node head) {
         HashMap<Integer, Node> map = new HashMap<Integer, Node>();
            Node h = head;
            Node node = null;
            Node n = null;
            while(h!=null){
                Node nd = new Node(h.val);
                if(n == null){
                    n=nd;
                }
                map.put(h.val, nd);
                h = h.next;
            }
            h = head;
            node = n;
            while(h!=null){
                if(h.next != null){
                    node.next = map.get(h.next.val);
                }
                if(h.random != null){
                    node.random = map.get(h.random.val);
                }
                h = h.next;
                node = node.next;
            }
            return n;
    }
}