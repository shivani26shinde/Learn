public class Solution {
    ArrayList<ArrayList<Integer>> fL = new ArrayList<ArrayList<Integer>>();
    HashSet<ArrayList<Integer>> set = new HashSet<ArrayList<Integer>>();
    public ArrayList<ArrayList<Integer>> combinationSum(ArrayList<Integer> a, int b) {
        Collections.sort(a);
        Recur(0, b, a.size(), a, new ArrayList<Integer>());
        return fL;
    }
    public void Recur(int in, int k, int n, ArrayList<Integer> a, ArrayList<Integer> temp){
        if(in<=n){
            int sum=0;
            for(int i=0;i<temp.size();i++){
                sum=sum+temp.get(i);
            }
            if(sum==k && !set.contains(temp)){
                ArrayList<Integer> l = new ArrayList<Integer>(temp);
                fL.add(l);
                set.add(l);
                return;
            }
        }
        if(in == n){
            return;
        }
        for(int i=in;i<n;i++){
            temp.add(a.get(i));
            Recur(i+1, k, n, a, temp);
            temp.remove(temp.size()-1);
        }
    }
}
