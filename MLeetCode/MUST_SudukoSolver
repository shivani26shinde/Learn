class Solution {
    HashSet<Integer>[] row = new HashSet[9];
    HashSet<Integer>[] col = new HashSet[9];
    HashSet<Integer>[] box = new HashSet[9];
    boolean solved=false;
    char[][] board;
    public void solveSudoku(char[][] board) {
        this.board=board;
        for(int i=0;i<9;i++){
            row[i] = new HashSet<Integer>();
            col[i] = new HashSet<Integer>();
            box[i] = new HashSet<Integer>();
        }
        for(int i=0;i<9;i++){
            for(int j=0;j<9;j++){
                if(this.board[i][j]!='.'){
                    addNumber(i,j,Character.getNumericValue(this.board[i][j]));
                }
            }
        }
        solve(0,0);
    }
    public void addNumber(int i,int j,int num){
        row[i].add(num);
        col[j].add(num);
        int boxNum = 3*(i/3)+(j/3);
        box[boxNum].add(num);
        this.board[i][j] = (char)(num+'0');
    }
    public void removeNumber(int i,int j,int num){
        row[i].remove(num);
        col[j].remove(num);
        int boxNum = 3*(i/3)+(j/3);
        box[boxNum].remove(num);
        this.board[i][j] = '.';
    }
    public void solve(int r,int c){
        if(this.board[r][c]=='.'){
            int bN = 3*(r/3)+(c/3);
            for(int i=1;i<10;i++){
                if(!row[r].contains(i) && !col[c].contains(i) && !box[bN].contains(i)){
                    addNumber(r,c,i);
                    addNext(r,c);
                    if(!solved) removeNumber(r,c,i);
                }
            }
        } else{
            addNext(r,c);
        }
    }
    public void addNext(int row,int col){
        if(row==8 && col==8) solved=true;
        else{
            if(col==8) solve(row+1,0);
            else solve(row,col+1);
        }
    }
}
