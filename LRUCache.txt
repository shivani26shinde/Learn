public class Solution {
    static int size;
    static HashMap<Integer, Node> map;
    static Node start;
    static Node end;
    public Solution(int capacity) {
        size = capacity;
        map = new HashMap<Integer, Node>();
        start = null;
        end = null;
    }
    
    public int get(int key) {
        if(map.containsKey(key)){
            Node node = map.get(key);
            remove(node);
            add(node);
            return node.val;
        }
        return -1;
    }
    
    public void set(int key, int value) {
        Node node;
        if(map.containsKey(key)){
            node = map.get(key);
            node.val = value;
            remove(node);
        } else{
            node = new Node();
            node.val = value;
            node.key = key;
            node.left = null;
            node.right = null;
            if(map.size() == size){
                map.remove(end.key);
                remove(end);
            }
        }
        map.put(key, node);
        add(node);
    }
    
    public void add(Node node) {
        node.right = start;
        node.left = null;
        if(start != null){
            start.left = node;
        }
        start = node;
        if(end == null){
            end = start;
        }
    }
    
    public void remove(Node node) {
        if(node.left != null){
            node.left.right = node.right;
        } else{
            start = node.right;
        }
        if(node.right != null){
            node.right.left = node.left;
        } else{
            end = node.left;
        }
    }
}
class Node{
    int val;
    int key;
    Node left;
    Node right;
}
