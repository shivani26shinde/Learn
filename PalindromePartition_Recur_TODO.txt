public class Solution {
    ArrayList<ArrayList<String>> fL = new ArrayList<ArrayList<String>>();
    public ArrayList<ArrayList<String>> partition(String a) {
        Recur(0, a, new ArrayList<String>());
        return fL;
    }
    public void Recur(int j, String a, ArrayList<String> temp){
        if(j==a.length()){
            fL.add(new ArrayList<String>(temp));
            return;
        }
        String str = "";
        for(int i=j;i<a.length();i++){
            str = str + a.charAt(i);
            if(isPalindrome(str)){
                temp.add(str);
                Recur(i+1, a, temp);
                temp.remove(temp.size()-1);
            }
        }
    }
    public boolean isPalindrome(String s){
        int st=0;
        int en=s.length()-1;
        while(st<en){
            if(s.charAt(st) != s.charAt(en)){
                return false;
            }
            st++;en--;
        }
        return true;
    }
}
