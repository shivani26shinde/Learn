class Solution {
    int n,m;
    public void solve(char[][] board) {
        n=board.length;
        if(n==0) return;
        m=board[0].length;
        
        // Start from the boarder and mark all the O's not surrounded
        for(int i=0;i<n;i++){
            if(board[i][0]=='O') solve(i,0,board);
            if(board[i][m-1]=='O') solve(i,m-1,board);
        }
        for(int i=0;i<m;i++){
            if(board[0][i]=='O') solve(0,i,board);
            if(board[n-1][i]=='O') solve(n-1,i,board);
        }
        
        // All the untouched O's are surrounded
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(board[i][j]=='O') board[i][j]='X';
            }
        }
        
        // Unmark all the marked O's
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(board[i][j]=='Y') board[i][j]='O';
            }
        }
    }
    public void solve(int i, int j, char[][] board) {
        if(i<0 || j<0 || i==n || j==m || board[i][j]=='X' || board[i][j]=='Y') return;
        board[i][j] = 'Y';
        solve(i+1,j,board);
        solve(i,j+1,board);
        solve(i-1,j,board);
        solve(i,j-1,board);
    }
}
