/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    int size;
    int index=0;
    StringBuilder sb = new StringBuilder();
    public String serialize(TreeNode root) {
        if(root==null) return "";
        preOrder(root);
        return sb.toString();
    }
    
    public void preOrder(TreeNode root){
        if(root==null) {
            sb.append("N,");
            return;
        }
        sb.append(root.val);
        sb.append(",");
        preOrder(root.left);
        preOrder(root.right);
    }
    
    public TreeNode construct(String[] str){
        if(index>= size || str[index].equals("N")){
            index++;
            return null;
        }
        System.out.println(index);
        TreeNode root = new TreeNode(Integer.parseInt(str[index]));
        index++;
        root.left = construct(str);
        root.right = construct(str);
        return root;
    }

    public TreeNode deserialize(String data) {
        if(data.length()==0) return null;
        String[] str = data.split(",");
        size = str.length;
        return construct(str);
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));
