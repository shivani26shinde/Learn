/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public ArrayList<Interval> merge(ArrayList<Interval> intervals) {
        Collections.sort(intervals, new Comparator<Interval>(){
            public int compare(Interval a, Interval b){
                return a.start - b.start;
            }
        });
        ArrayList<Interval> fL = new ArrayList<Interval>();
        fL.add(intervals.get(0));
        for(int i=1;i<intervals.size();i++){
            Interval l1 = fL.get(fL.size()-1);
            Interval l2 = intervals.get(i);
            if(l1.start <= l2.start && l2.start <= l1.end){
                Interval inv = new Interval(Math.min(l1.start, l2.start), 
                    Math.max(l1.end, l2.end));
                fL.set(fL.size()-1, inv);
            } else{
                fL.add(l2);
            }
        }
        return fL;
    }
}
