/**
 * // This is the Master's API interface.
 * // You should not implement it, or speculate about its implementation
// Solution 1
class Solution {
    public void findSecretWord(String[] wordlist, Master master) {
        ArrayList<String> l = new ArrayList<>(Arrays.asList(wordlist));
        for(int i=0;i<10;i++){
            String word = l.get(0);
            int match = master.guess(word);
            if(match == word.length()) return;
            Iterator<String> iter = l.listIterator();
            while(iter.hasNext()){
                String curr = iter.next();
                if(getCount(word,curr)!=match) iter.remove();
            }
            Collections.sort(l);
        }
        return;
    }
    public int getCount(String a, String b) {
        int count=0;
        for(int i=0;i<a.length();i++){
            if(a.charAt(i)==b.charAt(i)) count++;
        }
        return count;
    }
}

// Modification of above
class Solution {
    public void findSecretWord(String[] wordlist, Master master) {
        List<String> list = new LinkedList<>();
        for(int i=0;i<wordlist.length;i++) list.add(wordlist[i]);
        
        while(!list.isEmpty()){
            int idx = (int)(Math.random()*(list.size()));
            String word = list.remove(idx);
            int num = master.guess(word);
            if(num==6) return;
            
            Iterator<String> iter = list.listIterator();
            while(iter.hasNext()){
                String curr = iter.next();
                if(getCount(word,curr)!=num) iter.remove();
            }
        }
    }
    public int getCount(String a, String b) {
        int count=0;
        for(int i=0;i<a.length();i++){
            if(a.charAt(i)==b.charAt(i)) count++;
        }
        return count;
    }
}
