class Solution {
    public int minDominoRotations(int[] A, int[] B) {
        HashMap<Integer, Integer> map1 = new HashMap<>();
        HashMap<Integer, Integer> map2 = new HashMap<>();
        int max = Integer.MIN_VALUE;
        int num = 0;
        int arr = 1;
        for(int i=0;i<A.length;i++){
            if(map1.containsKey(A[i])){
                map1.put(A[i], map1.get(A[i]) + 1);
            } else{
                map1.put(A[i], 1);
            }
            if(map1.get(A[i]) > max){
                max = map1.get(A[i]);
                num = A[i];
            }
        }
        for(int i=0;i<B.length;i++){
            if(map2.containsKey(B[i])){
                map2.put(B[i], map2.get(B[i]) + 1);
            } else{
                map2.put(B[i], 1);
            }
            if(map2.get(B[i]) > max){
                arr = 2;
                max = map2.get(B[i]);
                num = B[i];
            }
        }
        if(arr == 1){
            return Count(A, B, map1, num);
        }
        return Count(B, A, map2, num);
    }
    public int Count(int[] arr1, int[] arr2, HashMap<Integer, Integer> map, int num){
        int c=0;
        for(int i=0;i<arr1.length;i++){
            if(arr1[i] != num){
                if(map.containsKey(arr1[i])){
                    map.put(arr1[i], map.get(arr1[i]) - 1);
                    if(map.get(arr1[i]) == 0){
                        map.remove(arr1[i]);
                    }
                }
                arr1[i] = arr2[i];
                c++;
                if(map.containsKey(arr1[i])){
                    map.put(arr1[i], map.get(arr1[i]) + 1);
                } else{
                    return -1;
                }
            }
        }
        if(map.size() == 1) return c;
        return -1;
    }
}