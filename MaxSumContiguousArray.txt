// O(NlogN)
public class MaxSumContiguousArray {
    // DO NOT MODIFY THE LIST. IT IS READ ONLY
    public int maxSubArray(final List<Integer> A) {
        int[] arr = new int[A.size()];
        int max = Integer.MIN_VALUE;
        for(int i=0;i<A.size();i++){
            arr[i] = A.get(i);
            max = Math.max(max, arr[i]);
        }
        for(int i=0;i<A.size()-1;i++){
            for(int j=i+1;j<A.size();j++){
                arr[j] = Math.max(arr[j-1]+A.get(j), arr[j]);
                max = Math.max(max, arr[j]);
            }
        }
        return max;
    }
}

// O(N)
public class MaxSumContiguousArray {
    // DO NOT MODIFY THE LIST. IT IS READ ONLY
    public int maxSubArray(final List<Integer> A) {
        int[] arr = new int[A.size()];
        int max = Integer.MIN_VALUE;
        for(int i=0;i<A.size();i++){
            max = Math.max(max, A.get(i));
        }
        for(int i=0;i<A.size();i++){
            if(i==0){
                arr[i] = A.get(i);
            } else{
                arr[i] = Math.max(arr[i-1]+A.get(i), A.get(i));
            }
            max = Math.max(max, arr[i]);
        }
        return max;
    }
}
