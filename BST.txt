// BST - Insert, Print, Search, Delete

class Ideone
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Node root = insert(null, 5);
		root = insert(root, 2);
		root = insert(root, 1);
		root = insert(root, 3);
		root = insert(root, 2);
		root = insert(root, 4);
		root = insert(root, 6);
		print(root);
		Node n = search(root,7);
		System.out.println();
		if(n != null){
			System.out.println(n.val);
		} else{
			System.out.println(-1);
		}
		root = delete(root, 6);
		print(root);
	}
	public static Node insert(Node root, int x){
		if(root == null){
			root = new Node(x);
			return root;
		}
		if(x <= root.val){
			root.left = insert(root.left, x);
		} else{
			root.right = insert(root.right, x);
		}
		return root;
	}
	public static void print(Node root){
		if(root != null){
			print(root.left);
			System.out.print(root.val+" ");
			print(root.right);
		}
	}
	public static Node search(Node root, int x){
		if(root == null){
			return null;
		}
		if(x == root.val){
			return root;
		} 
		if(x < root.val){
			return search(root.left, x);
		}
		return search(root.right, x);
	}
	public static Node delete(Node root, int x){
		if(root == null){
			return root;
		}
		if(x < root.val){
			root.left = delete(root.left, x);
		} else if(x > root.val){
			root.right = delete(root.right, x);
		}
		if(x == root.val){
			if(root.left == null && root.right == null){
				return null;
			}
			if(root.left == null){
				return root.right;
			}
			if(root.right == null){
				return root.left;
			}
			Node n = root.left;
			while(n.right != null){
				n = n.right;
			}
			root.val = n.val;
			root.left = delete(root.left, root.val);
		} 
		return root;
	}
}
class Node{
	int val;
	Node left = null;
	Node right = null;
	public Node(int val){
		this.val = val;
	}
}