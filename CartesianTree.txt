/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    public TreeNode buildTree(ArrayList<Integer> A) {
        if(A.size() == 0){
            return null;
        }
        return Tree;
    }
    public TreeNode Tree(int s,int e, ArrayList<Integer> A){
        if(s>e){
            return null;
        }
        if(s==e){
            return new TreeNode(A.get(s));
        }
        int max = getMax(A, s, e);
        TreeNode root = new TreeNode(A.get(max));
        root.left = Tree(l, max-1);
        root.right = Tree(l, max-1);
        return root;
    }
    public int getMax(ArrayList<Integer> A, int s, int e){
        int j=s;
        int max = A.get(s);
        for(int i=s+1;i<=e;i++){
            if(A.get(i)>max){
                max = A.get(i);
                j=i;
            }
        }
        return j;
    }
}
