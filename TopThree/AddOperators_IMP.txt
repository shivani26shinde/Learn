// Fast
class Solution {
    List<String> lst = new ArrayList<>();
    HashSet<String> set = new HashSet<>();
    public List<String> addOperators(String num, int target) {
        Recur("", 0, 0, 1, 0, num.length(), num, target);
        return lst;
    }
    public void Recur(String str, long val, long ans, 
                      int sign, int j, int n, String num, int target){
        if(j==n){
            if(ans+(val*sign) == target){
                lst.add(str);
            }
            return;
        }
        for(int i=j;i<n;i++){
            if (i != j && num.charAt(j) == '0') {
                break;
            }
            long v = Long.parseLong(num.substring(j, i+1));
            if(j==0){
                Recur(str+num.substring(j, i+1), v, ans, sign, i+1, n, num, target);
            } else{
                Recur(str+"+"+num.substring(j, i+1), 
                      v, ans+(val*sign), 1, i+1, n, num, target);
                Recur(str+"-"+num.substring(j, i+1), 
                      v, ans+(val*sign), -1, i+1, n, num, target);
                Recur(str+"*"+num.substring(j, i+1), 
                      val*v, ans, sign, i+1, n, num, target); 
            }                       
        }
    }
}

// Very Slow
class Solution {
    List<String> lst = new ArrayList<>();
    HashSet<String> set = new HashSet<>();
    public List<String> addOperators(String num, int target) {
        Recur("", 0, num.length(), num, target);
        return lst;
    }
    public void Recur(String str, int j, int n, String num, int target){        
        if(j==n){
            if(str.length() == 0) return;
            String s = str.substring(0, str.length()-1);
            if(set.contains(s)) return;
            if(Calculate(s) == target) lst.add(s);
            set.add(s);
            return;
        }
        for(int i=j;i<n;i++){
            if (i != j && num.charAt(j) == '0') {
                break;
            }
            Recur(str+num.substring(j, i+1)+"*", i+1, n, num, target);
            Recur(str+num.substring(j, i+1)+"+", i+1, n, num, target);
            Recur(str+num.substring(j, i+1)+"-", i+1, n, num, target);
        }
    }
    public long Calculate(String s){
        int sign = 1;
        long ans = 0;
        int op = -1;
        long val = 0;
        int i = 0;
        while(i<s.length()){
            if(Character.isDigit(s.charAt(i))){
                StringBuilder sb = new StringBuilder();
                while(i<s.length() && Character.isDigit(s.charAt(i))){
                    sb.append(s.charAt(i));
                    i++;
                }
                i--;
                if(op == 1){
                    val = val*Long.parseLong(sb.toString());
                } else{
                    val = Long.parseLong(sb.toString());
                }
            } else if(s.charAt(i) == '*'){
                op = 1;
            } else if(s.charAt(i) == '+'){
                ans += val*sign;
                sign = 1;
                op = -1;
            } else if(s.charAt(i) == '-'){
                ans += val*sign;
                sign = -1;
                op = -1;
            }
            i++;
        }
        return ans += val*sign;
    }
}