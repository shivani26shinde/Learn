// ArrayList
class TicTacToe {

    /** Initialize your data structure here. */
    ArrayList[] r;
    ArrayList[] c;
    int len;
    ArrayList<Integer> d1 = new ArrayList<>();
    ArrayList<Integer> d2 = new ArrayList<>();
    public TicTacToe(int n) {
        len = n;
        r = new ArrayList[n];
        c = new ArrayList[n];
        for(int i=0;i<n;i++){
            r[i] = new ArrayList<Integer>();
            c[i] = new ArrayList<Integer>();
        }
    }
    
    /** Player {player} makes a move at ({row}, {col}).
        @param row The row of the board.
        @param col The column of the board.
        @param player The player, can be either 1 or 2.
        @return The current winning condition, can be either:
                0: No one wins.
                1: Player 1 wins.
                2: Player 2 wins. */
    public int move(int row, int col, int player) {
        r[row].add(player);        
        c[col].add(player);
        
        if(row == col) d1.add(player);        
        if(row+col+1 == len) d2.add(player);
        
        if(Collections.frequency(r[row], player) == len || 
           Collections.frequency(c[col], player) == len || 
           Collections.frequency(d1, player) == len || 
           Collections.frequency(d2, player) == len) return player;
        return 0;
    }
}

/**
 * Your TicTacToe object will be instantiated and called as such:
 * TicTacToe obj = new TicTacToe(n);
 * int param_1 = obj.move(row,col,player);
 */


// HashMap
class TicTacToe {

    /** Initialize your data structure here. */
    HashMap[] r;
    HashMap[] c;
    int len;
    HashMap<Integer,Integer> d1 = new HashMap<>();
    HashMap<Integer,Integer> d2 = new HashMap<>();
    public TicTacToe(int n) {
        len = n;
        r = new HashMap[n];
        c = new HashMap[n];
        for(int i=0;i<n;i++){
            r[i] = new HashMap<Integer,Integer>();
            c[i] = new HashMap<Integer,Integer>();
        }
    }
    
    /** Player {player} makes a move at ({row}, {col}).
        @param row The row of the board.
        @param col The column of the board.
        @param player The player, can be either 1 or 2.
        @return The current winning condition, can be either:
                0: No one wins.
                1: Player 1 wins.
                2: Player 2 wins. */
    public int move(int row, int col, int player) {
        if(r[row].containsKey(player)) r[row].put(player, (int)r[row].get(player)+1);
        else r[row].put(player, 1);
        
        if(c[col].containsKey(player)) c[col].put(player, (int)c[col].get(player) + 1);
        else c[col].put(player, 1);
        
        if(row == col){
            if(d1.containsKey(player)) d1.put(player, d1.get(player) + 1);
            else d1.put(player, 1);
        }
        
        if(row+col+1 == len){
            if(d2.containsKey(player)) d2.put(player, d2.get(player) + 1);
            else d2.put(player, 1);
        }
        
        if(r[row].get(player).equals(len) || 
           c[col].get(player).equals(len) || 
           (d1.containsKey(player) && d1.get(player) == len) || 
           (d2.containsKey(player) && d2.get(player) == len)) return player;
        return 0;
    }
}

/**
 * Your TicTacToe object will be instantiated and called as such:
 * TicTacToe obj = new TicTacToe(n);
 * int param_1 = obj.move(row,col,player);
 */