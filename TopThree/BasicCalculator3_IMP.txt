class Solution {
    public int calculate(String s) {
        s = s.replaceAll(" ", "");
        Stack<String> st = new Stack<>();
        StringBuilder sb = new StringBuilder();
        for(int i=0;i<s.length();i++){
            char c = s.charAt(i);
            if(Character.isDigit(c)){
                sb.append(c);
                if(i==s.length()-1){
                    st.push(sb.toString());
                }
            } else{
                if(sb.length() > 0){
                    st.push(sb.toString());
                    sb = new StringBuilder();
                }
                if(c != ')'){
                    st.push(String.valueOf(c));
                } else {
                    ArrayList<String> lst = new ArrayList<>();
                    while(!st.isEmpty()){
                        if(st.peek().equals("(")){
                            st.pop();
                            break;
                        } else{
                            lst.add(0, st.pop());
                        }
                    }
                    int temp = 0;
                    int sign = 1;
                    int k=0;
                    while(k<lst.size()){
                        if(lst.get(k).equals("+")){
                            sign = 1;
                        } else if(lst.get(k).equals("-")){
                            sign = -1;
                        } else{
                            temp += Integer.parseInt(lst.get(k))*sign;
                        }
                        k++;
                    }
                    st.push(String.valueOf(temp));
                }
            }            
        }
        ArrayList<String> lst = new ArrayList<>();
        while(!st.isEmpty()){
            lst.add(0, st.pop());
        }
        int temp = 0;
        int sign = 1;
        int k=0;
        while(k<lst.size()){
            if(lst.get(k).equals("+")){
                sign = 1;
            } else if(lst.get(k).equals("-")){
                sign = -1;
            } else {
                temp += Integer.parseInt(lst.get(k))*sign;
            }
            k++;
        }
        return temp;
    }
}