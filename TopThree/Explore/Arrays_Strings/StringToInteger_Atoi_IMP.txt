class Solution {
    public int myAtoi(String str) {
        int i=0;
        while(i<str.length()){
            if(str.charAt(i) == ' ') i++;
            else break;
        }
        str = str.substring(i);
        
        // Empty String
        if(str.length() == 0) return 0;
        
        // Contains undesired characters
        if(str.charAt(0) != '-' && 
           str.charAt(0) != '+' && 
           !Character.isDigit(str.charAt(0))) return 0;
        
        // Check for sign
        i=0;
        boolean sign = false;
        if(i<str.length()){
            if(str.charAt(i) == '-') sign = true;
            if(str.charAt(i) == '-' || str.charAt(i) == '+') i++;
        }        
        
        // Get the integer string
        StringBuilder sb = new StringBuilder();
        while(i<str.length() && Character.isDigit(str.charAt(i))){
            sb.append(str.charAt(i));
            i++;
        }
        str = sb.toString();
        
        // Empty String
        if(str.length() == 0) return 0;
        
        // Remove all 0's
        i=0;
        while(i<str.length() && str.charAt(i) == '0'){
            i++;
        }    
        if(i==str.length()) return 0;
        str = str.substring(i);
        
        // Check for max length
        if(str.length() > 10){
            if(sign) return Integer.MIN_VALUE;
            return Integer.MAX_VALUE;
        }
        
        int j=0;
        int st=str.length()-1;
        long ans = 0;
        boolean max = false;
        while(j<str.length()){
            int c = Character.getNumericValue(str.charAt(j));
            ans = ans + (long)(Math.pow(10,st) * c);
            if(ans>Integer.MAX_VALUE){
                max = true;
                break;
            }
            j++;
            st--;
        }
        if(sign && max) return Integer.MIN_VALUE;
        if(!sign && max) return Integer.MAX_VALUE;
        if(sign) return ((int)ans*-1);
        return (int)ans;
    }
}