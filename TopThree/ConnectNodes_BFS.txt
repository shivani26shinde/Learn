/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}

    public Node(int _val,Node _left,Node _right,Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/
class Solution {
    public Node connect(Node root) {
        if(root == null) return null;
        Queue<Node> q = new LinkedList<>();
        int h = height(root)-1;
        q.add(root);
        int i=0;
        while(!q.isEmpty() && i<h){
            int val = (int)Math.pow(2,i);
            for(int j=0;j<val;j++){
                Node node = q.poll();
                q.add(node.left); q.add(node.right);
                if(j<val-1){
                    node.next = q.peek();
                }
            }
            i++;
        }
        while(!q.isEmpty()){
            Node node = q.poll();
            if(!q.isEmpty()){
                node.next = q.peek();
            }
        }
        return root;
    }
    public int height(Node root){
        if(root == null) return 0;
        return 1+height(root.left);
    }
}