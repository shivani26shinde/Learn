class Solution {
    public int orangesRotting(int[][] grid) {
        Queue<Node> q = new LinkedList<>();
        int n=grid.length;
        if(n==0) return -1;
        int m=grid[0].length;
        int count=0;
        int total=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==2){
                    q.add(new Node(i,j));
                    total++;
                }
                if(grid[i][j]==1) total++;
            }
        }
        int rottenTotal=0;
        while(!q.isEmpty()){
            int size = q.size();
            int check=0;
            for(int i=0;i<size;i++){
                Node node = q.poll();
                rottenTotal++;
                if(node.row>0 && grid[node.row-1][node.col]==1){
                    check++;
                    grid[node.row-1][node.col]=2;
                    q.add(new Node(node.row-1, node.col));
                }
                if(node.col>0 && grid[node.row][node.col-1]==1){
                    check++;
                    grid[node.row][node.col-1]=2;
                    q.add(new Node(node.row, node.col-1));
                }
                if(node.row+1<n && grid[node.row+1][node.col]==1){
                    check++;
                    grid[node.row+1][node.col]=2;
                    q.add(new Node(node.row+1, node.col));
                }
                if(node.col+1<m && grid[node.row][node.col+1]==1){
                    check++;
                    grid[node.row][node.col+1]=2;
                    q.add(new Node(node.row, node.col+1));
                }
            }
            if(check>0) count++;
        }
        return rottenTotal<total?-1:count;
    }
}
class Node{
    int row;
    int col;
    public Node(int row, int col){
        this.row=row;
        this.col=col;
    }
}
