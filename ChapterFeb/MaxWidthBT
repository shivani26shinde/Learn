class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        int max = 0;
        Queue<Node> q = new LinkedList<>();
        q.add(new Node(root,0));
        while(!q.isEmpty()){
            int size = q.size();
            int start=-1;
            for(int i=0;i<size;i++){
                Node node = q.poll();
                if(node.node!=null){
                    q.add(new Node(node.node.left,node.pos*2));
                    q.add(new Node(node.node.right,node.pos*2+1));
                    if(start==-1) start=node.pos;
                    max = Math.max(max,node.pos-start+1);
                }
            }
        }
        return max;
    }
}
class Node{
    TreeNode node;
    int pos;
    public Node(TreeNode node, int pos){
        this.node = node;
        this.pos = pos;
    }
}
