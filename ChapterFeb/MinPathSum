// Solution 1 --> Good Solution - DP
class Solution {
    int m,n;
    public int minPathSum(int[][] grid) {
        m = grid.length;
        if(m<=0) return 0;
        n = grid[0].length;
        int[][] dp = new int[m][n];
        dp[0][0] = grid[0][0];
        for(int i=1;i<m;i++){
            dp[i][0] = dp[i-1][0] + grid[i][0];
        }
        for(int i=1;i<n;i++){
            dp[0][i] = dp[0][i-1] + grid[0][i];
        }
        for(int i=1;i<m;i++){
            for(int j=1;j<n;j++){
                dp[i][j] = Math.min(dp[i-1][j],dp[i][j-1]) + grid[i][j];
            }
        }
        return dp[m-1][n-1];
    }
}

// Solution 2 -> Poor solution - Backtrack
class Solution {
    int min = Integer.MAX_VALUE;
    int[][] grid;
    int m,n;
    public int minPathSum(int[][] grid) {
        this.grid = grid;
        m = grid.length-1;
        if(m<0) return 0;
        n = grid[0].length-1;
        minPathSum(0,0,0);
        return min;
    }
    public void minPathSum(int i,int j,int sum){    
        if(i>m || j>n) return;
        int val = this.grid[i][j];
        if(i==m && j==n){
            min = Math.min(sum+val,min);
            return;
        }
        minPathSum(i+1,j,sum+val);
        minPathSum(i,j+1,sum+val);
    }
}
