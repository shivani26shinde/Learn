class Solution {
    Trie root = new Trie();
    List<String> list = new ArrayList<>();
    public List<String> findAllConcatenatedWordsInADict(String[] words) {
        createTrie(words);
        for(String word:words){
            if(dfs(0,0,word)) list.add(word);
        }
        return list;
    }
    public boolean dfs(int start, int count, String word){
        Trie curr = root;
        for(int i=start;i<word.length();i++){
            int index = word.charAt(i)-'a';
            if(curr.nodes[index]==null) return false;
            if(curr.nodes[index].isWord && dfs(i+1,count+1,word)) return true;
            curr = curr.nodes[index];
        }
        return curr.isWord && count>0;
    }
    public void createTrie(String[] words){
        for(String word:words){
            if(word.length()==0) continue;
            Trie curr = root;
            for(int i=0;i<word.length();i++){
                int index = word.charAt(i)-'a';
                if(curr.nodes[index]==null) curr.nodes[index] = new Trie();
                curr = curr.nodes[index];
            }
            curr.isWord=true;
        }
    }
}
class Trie{
    Trie[] nodes = new Trie[26];
    boolean isWord;
}
