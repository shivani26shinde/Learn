class Solution {
    int r;
    int c;
    public int maximumMinimumPath(int[][] A) {
        r = A.length;
        if(r==0) return 0;
        c = A[0].length;
        int[][] dirs = new int[][]{{0,-1},{1,0},{0,1},{-1,0}};
        Queue<int[]> q = new PriorityQueue<>((a,b)->Integer.compare(b[2],a[2]));
        boolean[][] visited = new boolean[r][c];
        q.add(new int[]{0,0,A[0][0]});
        visited[0][0]=true;
        while(!q.isEmpty()){
            int[] curr = q.poll();
            int x=curr[0];
            int y=curr[1];
            if(x==r-1 && y==c-1) return curr[2];
            for(int i=0;i<dirs.length;i++){
                int newX = x+dirs[i][0];
                int newY = y+dirs[i][1];
                if(newX<0 || newY<0 || newX==r || newY==c || visited[newX][newY]) continue;
                System.out.println(Math.min(curr[2],A[newX][newY])+"    "+curr[2]+"   "+A[newX][newY]);
                q.add(new int[]{newX,newY,Math.min(curr[2],A[newX][newY])});
                visited[newX][newY] = true;
            }
        }
        return Integer.MAX_VALUE;
    }
}
