// DP Solution - Top-Down
class Solution {
    HashMap<String,Integer> map = new HashMap<>();
    boolean[][] dp;
    int n;
    public boolean canPartition(int[] nums) {
        int sum=0;
        n=nums.length;
        for(int i:nums) sum+=i;
        if(sum%2!=0) return false;
        sum=sum/2;
        dp = new boolean[n][sum+1];
        for(int i=0;i<n;i++) dp[i][0]=false;
        return canPartition(0,sum,nums);
    }
    public boolean canPartition(int index, int sum, int[] nums){
        if(sum==0) return true;
        if(n==0 || index==n) return false;
        if(dp[index][sum]) return dp[index][sum];
        if(nums[index]<=sum){
            if(canPartition(index+1, sum-nums[index], nums)){
                dp[index][sum] = true;
                return dp[index][sum];
            }
        }
        dp[index][sum] = canPartition(index+1, sum, nums);
        return dp[index][sum];
    }
}
